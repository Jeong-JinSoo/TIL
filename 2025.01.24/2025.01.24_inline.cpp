// 인라인 함수
// 호출될 때 일반적인 함수의 호출 과정을 거치지 않고, 함수의 모든 코드를 호출된 자리에
//  바로 삽입하는 방식의 함수
// 
// 이 방식을 이용하면 함수 호출 시간은 절약되나, 함수 호출 과정으로 생기는 여러 이점을 포기해야 한다.
// 
// 코드가 매우 적은 함수만을 인라인 함수로 선언하는 것이 좋음
// 
// 매크로 함수에서 소괄호를 적절히 사용하지 않아 발생하는 오류가 디버깅을 어렵게 만들었고,
// 이를 해경하기 위해 인라인(inline) 함수가 등장하였음
// 
// 인라인 함수는 전처리기가 치환하는 매크로 함수와 달리 그보다 똑똑한 컴파일러가
// 알아서 보통의 함수처럼 연산 순서를 고려하여 치환한다.
// 
// 만약 이미 존재하는 함수와 이름이 같은 인라인 함수를 정의할 경우, 작업 비용이 적은 함수로 골라서 사용한다.
// 만약 인라인 함수의 비용이 더 클 경우 인라인 함수 구문은 무시된다.

// 인라인 함수 만들기
// 인라인 함수는 다음과 같이 정의 한다.
__inline datatype 함수명(인자) { 실행 구문; }

// ex)
__inline int square(int x) { return x * x; }

int main()
{
	cout << square(3) << endl;
	return 0;
}
// output : 9

// 만약 main에서 quare함수를 정의 하였다면 함수가 저장된 메모리로 점프하고,
// 해당 함수의 결과를 반환하는 과정에서 시간이 오래 걸리게 된다.

// 인라인 함수는 그러한 시간 소요를 줄이고자 아래와 같은 동작을 하도록 만든 기능이다.
// 또한 인라인 함수는 매크로 함수처럼 () 소괄호를 고려할 필요 없이 컴파일러가 알아서
// 연산을 보통의 함수처럼 처리한다.