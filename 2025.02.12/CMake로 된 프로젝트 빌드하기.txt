CMAKE 설치하기
https://cmake.org/download/ 여기서 받을 수 있다.

Cmake는 무엇인가?
cmake는 빌드 시스템에서 필요로 하는 파일을 생성하는데 그 목적이 있다.

cmake 배치
cmake를 사용해 프로젝트를 관리하고자 한다면, 필요/의도에 맞게 cmakelist.txt 파일을 배치해야 한다.

일반적으로 root cmake 파일을 두는 것이 편리하다.
많은 경우 소스코들은 폴더를 사용해 조직화 되어 있으므로, 모든 프로젝트들이 재귀적으로 폴더 내에 CMakeList.txt를 두고 있으면 관리할 때 폴드 == 프로젝트로 생각 할 수 있게 된다.

$ tree ./small-project/
./small-project         # Project root folder
├── CMakeLists.txt      # <--- Root CMake
├── include             # header files
│   └── ... 
├── module1             # sub-project
│   ├── CMakeLists.txt
│   └── ... 
├── module2             # sub-project
│   ├── CMakeLists.txt
│   └── ... 
└── test                # sub-project
    ├── CMakeLists.txt
    └── ... 

project
프로젝트의 이름을 지정할 수 있다.
cmakelist.txt에 다음과 같이 작성하는것으로 프로젝트에 이름을 부여한다.

# Cmake에서 주석은 #을 사용해 작성한다.
project(my_project)

좀더 상세하게, 언어와 버전을 명시하는 것도 가능하다.

# 한 줄에 모든 것을 적을 수 있다.
project(my_project LANGUAGES CXX VERSION 1.2.3)

# multi-line으로 작성하는 것 또한 가능하다.
project(my_project
		LANGUAGES CXX
		VERSION 1.2.3
)

이렇게 project를 명시하게 되면 VIsual Studio에서는 같은 이름으로 Solution 파일이 생성된다. 즉, project만으로는 프로그램을 생성하지 않는다. 실제로 프로그램을 생성하기 위해서는 add_excutable, add_library를 시용하여야 한다.

소스코드 조직화

프로그램(exe, lib, dll, a, so, dylib ...)을 만들기 위해서는 컴파일러에게 제공할 소스코드가 필요하다. CMakeㅇ게 소스코드 목옥으로부터 생성할 프로그램의 타입을 지시하기 위해 사용하는 함수들이 바로 add_excutable, add_library이다. project는 하나만 가능하지만, 이 함수들은 CMakeList안에서 여러번 사용되기도 한다. 빌드 결과 생성되는 프로그램의 이름만 다르다면 크게 문제되지 않는다.

add_excutable, add_libarary

아래와 같은 구조로 프로젝트가 구성되었다고 해보자.
$ tree ./project-example/
./project-example
├── CMakeLists.txt
├── include
│   └── ... 
└── src
    ├── CMakeLists.txt
    ├── main.cpp
    ├── feature1.cpp
    ├── feature2.cpp
    ├── algorithm3.cpp
    └── data_structure4.cpp
우선 Root CMakeLIst(project-example/CMakeList.txt)가 아니라 src/ 폴더에 있는 CMakeList (project-example/src/CMakeList.txt)부터 살펴보자.

만약 src 폴더에 있는 모든 .cpp 파일들이 실행 파일(exe)을 만든다면, 아래와 같은 내용이 작성되어야 한다.