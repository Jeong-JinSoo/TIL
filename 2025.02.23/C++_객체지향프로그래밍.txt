객체 지향 프로그래밍(Object-Oriented Programming, OOP)는 프로그래밍 패러다임 중 하나로, '객체'라는 개념을 중심으로 소프트웨어를 설계하고 개발하는 방법론이다.

객체란 뭘까?

객체는 실세계에서 인식 할 수 있는 사물이라 개념을 프로그래밍에서 표현한 것을 말한다. 예를 들어, '차'라는 객체는 '색상', '모델', '제조사' 등의 속성과 '운전하기', '정차하기' 와 같은 메소드를 정의 할 수 있다. 그리고 이 클래스를 통해 실제 '차' 객체를 만들 수 있다.

C++ 코드 예제를 통해 이를 이해해보자.
class Car 
{
public:
	string color;
	string model;
	string manufacturer;

	void drive()
	{
		std::cout << "차가 움직이는 중" << endl;
	}

	void stop()
	{
		cout << "차가 정차하는 중" << endl;
	}
};

위의 코드에서 Car라는 클래스를 정의하였다. 이 클래스는 'color','model','manufacturer'라는 속성과 'drive()','stop()'이라는 메서드를 가지고 있다. 이 클래스 'color', 'model', 'manufacturer'라는 속성과 'drive()', 'stop()'이라는 메서드를 가지고 있다.

이제 이 Car 클래스를 통해 실제 '차' 객체를 만들어 보자.
Car myCar;
myCar.color = "Red";
myCar.model = "Sedan";
myCar.manufacturer = "Hyundai";

myCar.drive();
myCar.stop();

위의 코드에서 myCar라는 객체를 생성하였고, 이 객체의 속성을 설정하였다. 그리고 drive()와 stop()메소드를 호출하여 차가 운전하고 정차하는 행동을 표현했다.

객체 지향 프로그래밍은 이렇게 객체의 속성과 행동을 하나로 묶어서 프로그래밍하는 것을 말한다. 이를 통해 코드의 재사용성을 높이고, 유지보수를 용이하게 하며, 보다 직관적인 코드 설계가 가능하다.

이러한 객체 지향 프로그래밍은 'class(Object)'를 생성하는 틀이나 설계도와 같다. '속성'은 객체의 상태를 나타내는 데이터를 의미하며, '메서드'는 객체가 수행 할 수 있는 행동을 의미한다.

객체 지향 프로그래밍은 실세계의 객체를 프로그래밍으로 표현하여, 복잡한 문제를 더 감결하고 이해하기 쉬운 형태로 해결 할 수 있게 도와준다. 특히 소프트웨어의 복잡성을 관리하고, 재사용성을 높이며, 유지보수를 용이하게 하는데 큰 도움을 준다.

객체 지향 프로그래밍 (Object-Oriented Programming, OOP)과 절차 지향 프로그래밍 (Procedural Programming)은 프로그래밍의 주요한 패러다임 중 하나이다. 두 방식은 서로 상당히 다른 접근 방식을 가지고 있으며, 이는 코드의 구조와 설계에 큰 영향을 미친다.

절차 지향 프로그래밍은 프로그램을 일련의 절차 혹은 순서로 이해하는 방식이다. 이 패러다임은 주로 함수를 사용하여 코드를 구조화하며, 데이터와 함수가 별도로 존재한다. 프로그램은 일련의 함수 호출로 구성되며, 각 함수는 특정 작업을 수행하고 결과를 반환한다.

반면, 객체지향 프로그래밍은 프로그램을 서로 상호작용 하는 객체들의 집합으로 보는 방식이다. 이 패러다임에서는 데이터와 함수가 객체라는 하나의 단위로 묶여 있다. 객체들은 자신만의 상태(속성)와 행동(메서드)를 가지며, 이를 통해 프로그램의 복잡성을 관리하고 코드의 재사용성을 높이는 것이 가능하다.

이제 C 언어화 C++ 언어를 사용하여 절차 지향 프로그래밍과 객체 지향 프로그래밍의 차이점을 보여주는 예제 코드를 살펴보자.

먼저, C 언어를 사용한 절차 지향적인 방식의 코드이다.

#include <studio.h>

typedef struct
{
	char color[20];
	char model[20];
	char manufacturer[20];
} Car;

void stopCar(Car car)
{
	printf("차가 운전 중이다.\n");
}

void stopCar(Car car)
{
	printf("차가 정지 중이다.\n");
}

int main()
{
	Car myCar;

	strcpy(myCar.color, "Red");
	strcpy(myCar.model, "Sedan");
	strcpy(myCar.manufacturer, "Hyundai");

	driveCar(myCar);
	stopCar(myCar);

	return 0;
}

이 예제에서는 Car라는 구조체를 정의하고, driveCar와 stopCar라는 함수를 사용하여 차를 운전하고 정지신다. 각 함수는 특정 작업을 수행하며, 데이터와 함수가 별도로 존재한다.

다음으로, C++를 사용하여 객체 지향적인 방식으로 동일한 기능을 구현한 코드를 살펴본다.

#include <iostream>
#include <string>

class Car
{
public:
	std::string color;
	std::string model;
	std::string manufacturer;

	void drive()
	{
		std::cout << "차가 운전 중이다.\n";
	}

	void stop()
	{
		std::cout << "차가 정지 중이다.\n";
	}
};

int main()
{
	Car myCar
	myCar.color = "Red";
	myCar.model = "Sedan";
	myCar.manufacturer = "Hyundai";

	myCar.drive();
	myCar.stop();

	return 0;
}

이 예제에서는 Car라는 클래스를 정의하고, drive와 stop이라는 메서드를 사용하여 차를 운전하고 정지시킨다. 클래스는 객체의 상태(속성)과 행동(메서드)를 묶어서 하나의 단위로 표현한다. 객체는 자신만의 상태와 행동을 가지며, 이를 통해 코드의 복잡성을 관리하고 재사용성을 높이는 것이 가능해진다.

이렇게 비교해 보면, 절차 지향 프로그래밍과 객체지향 프로그래밍은 프로그램을 구성하는 방식에서 큰 차이를 보인다. 절차지향 프로그래밍은 함수와 데이터가 별개로 존재하고, 프로그램은 함수의 순서대로 실행되는 반면, 객체 지향 프로그래밍은 데이터와 함수가 객체라는 하나의 단위로 묶여 있으며, 객체들이 서로 상호작용 하면서 프로그램이 실행된다.

따라서, 객체 지향 프로그래밍은 코드의 재 사용성을 높이고, 유지보수를 용이하게 하며, 보다 직관적인 코드 설계가 가능하다는 장점이 있다. 또한, 실세계의 문제를 보다 자연스럽게 표현할 수 있으며, 복잡한 소프트웨어 시스템을 개발하고 관리하는데 유리하다.