C++에서 lvalue는 특정 메모리 위치를 가리킨다. 반면 rvalue는 아무데도 가리키지 않는다. 일반적으로 rvalue는 일시적이고 수명이 짧지만 lvalue는 변수로 존재하기 때문에 수명이 더 길다.

int x = 666;

여기서 666은 rvalue이다. 숫자(리터럴 상수)는 프로그램 실행 중의 임시 레지스터를 제외하면 특정 메모리 주소가 없다. 666은 변수 x에 할당된다. 변수는 특정 메모리 주소가 있으며 따라서 lvalue이다.

C++에서 할당 연산자(assignment operation)인 =는 왼쪽 피연산자(left operand)로 lvalue가 필요하다.

그리고 lvalue인 x를 가지고 다음과 같은 것을 할 수 있다.

int *y = &x;

여기서 x의 주소를 참조 연산자인 &로 y에 할당하고 있다. &는 lvalue를 인수로 받아 rvalue를 만든다. 할당 연산자 =의 왼쪽에 lvalue인 변수, 오른쪽에 & 연산으로 만들어진 rvalue가 있기 때문에 합법적인 연산이다.

하지만 다음은 그렇지 않다.

int y;
666 = y;

666은 리터럴 상수이고 rvalue이기 때문에 특정 메모리 주소가 없다. y를 없는 곳에 할당하고 있는것이다.
프로그램을 컴파일 하면 GCC는 이런 메세지를 출력한다.

error : rvalue required as left operand of assignment

= 연산자의 왼쪽에는 항상 lvalue가 필요하지만 이 코드는 rvalue인 666을 왼쪽 피연산자로 사용하고 있기 때문이다.

마찬가지로 아래 코드도 불가능하다.

int * y = &666

&연산자는 lvalue를 취해야 하는데, 이는 오직 lvalue만이 참조 할 수 있는 주소를 갖고 있기 때문이다.

lvalue와 rvalue를 반환하는 함수

할당 연산자의 왼쪽 피 연산자에 lvalue가 와야 한다는 것을 알고 있기 때문에, 아래와 같은 코드는 오류가 발생할 것이라는 걸 알 수 있다.

int SetValue()
{
	return 6;
}

// ..somewhere in main() ...
setValue() = 3;

SetValue()는 rvalue(6)을 반환한다. 이는 연산자의 왼쪽 피 연산자로 사용 할 수 없기 때문에 오류가 발생한다.

그렇다면 lvalue를 반환하는 함수는 어떨까?

int global = 100;

int& setGlobal()
{
	return global;
}

// somewhere in main() ...
Set global() = 400;

setGlobal()은 참조(reference)를 반환한다. 참조는 존재하고 있는 메모리 장소(global 변수)를 가리키는 것이다. 이것은 lvalue이기 때문에 = 연산자로 할당할 수 있는 것이다.

물론... 이 코드가 반환한 포인터는 함수 밖으로 나오며 댕글링포인터가 된 상태이기에 이런 코드는 나중에 문제가 발생할 수 있지만.

함수에서 lvalue를 반환하는 것은 혼란스러워 보이지만 일부 오버로드 된 연산자를 구현하는 것과 같은 고급 작업을 할때 유용하다.

lvalue에서 rvalue로 변환 될 수 있다. 예를 들어 더하기 연산자인 +를 보자. 두개의 rvalue를 취하고 rvalue를 반환한다.

int x = 1;
int y = 3;
int z = x + y;

x와 y는 lvalue이지만 더하기 연산자는 rvalue를 취한다. 어떻게 된걸까? x와 y는 암시적으로 lvalue에서 rvalue로 변환된 것이다. (lvaue-to-rvalue- conversion) 뺄샘, 덧샘, 나눗셈등 다른 많은 연산자들이 이러한 변환을 수행한다.

lvalue 참조

반대는 어떨까? rvalue를 lvalue로 변환 할 수 있을까? 기술적인 제한이 있는 것은 아니지만 불가능하다. 왜냐하면 C++의 설계가 그렇게 되어있기 때문이다. 

int y = 10;
int& yref = y;
yref++;

yref는 int& 타입으로, y에 대한 참조이다. 이것을 lvalue 참조(lvalue reference)라고 부른다. 이제 yref를 통해 y의 값을 변경 할 수 있다.

참조는 특정 메모리 주소에 이미 존재하고 있는 오브젝트를 가리켜야 하고, 여기서 y가 그 오브젝트 이기 때문에 코드는 아무 결함 없이 작동한다.

이 과정을 생략하고 10을 바로 참조하게 하면 어떻게 될까?

int& yref = 10;

오른쪽에는 임시적인, lvalue에 저장해야 하는 rvalue가 있다.

왼쪽에는 존재하는 오브젝트를 가리켜야 하는 참조(value)가 있다. 하지만 10은 숫자 상수이고 특정 메모리 주소가 없는 rvalue이기 때문에, 이 코드는 참조의 개념과 충돌한다.