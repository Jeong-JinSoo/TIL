그래픽스에 대한 이해

제일 먼저 그래픽 하드웨어에 대해 알아보자
Direct3D =  하드웨어 인터페이스
그래픽 하드웨어 자체를 조작하기 위해 수행된다.

GPU와 CPU의 차이
CPU는 계산을 수행하고 전체 컴퓨터를 지시한다.
GPU는 그래픽에서 계산을 수행하고 그래픽 출력을 모니터로 지시한다.

그래픽 프로그래밍은 자체 별도 프로세서와 고립된 메모리를 가진다.
GPU에서 독자적으로 사용가능한 이 메모리는 화면의 현재 이미지와 다음 이미지를 컴파일 하는데 사용 될 수 있는 모든 데이터를 저장하는데 사용된다.

DIrect3D는 데이터가 시스템 메모리나 비디오 메모리에 저장되는 시점을 관리한다.

DirectX Graphics Infrastructure (DXGI) DX그래픽스 인프라
DXGI는 Direct3D의 모든 최신 버전의 기반에 있는 구성요소.
화면에 이미지를 표시하고 모니터와 비디오 카드가 처리할 수 있는 해상도를 찾는 등의 기본 작업을 처리.
DXGI는 Direct3D의 일부가 아니고, 보다 하위에서 Direct3D와 하드웨어를 연결하는 인터페이스의 역할을 함

스왑체인 (Swap Chain)
GPU는 화면에 표시되는 픽셀버퍼에 대한 '포인터'를 메모리에 포함한다.
3D 모델이나 이미지와 같은 것을 렌더링 해야 할 때, GPU는 이 배열을 업데이트하고 정보를 모니터로 보낸다.
그리고 모니터는 화면을 위에서 아래로 다시 그려서 이전 이미지를 새 이미지로 바꾼다.

문제는 모니터가 실시간 렌더링에 필요한 만큼 빠르게 새로고침 되지 않는다는 문제가 있다. (모니터 주사율 이야기) 모니터가 새로고침 되는 동안 다른 모델이 GPU에 렌더링되면 표시되는 이미지가 두개로 잘리고 위는 이전 이미지, 아래는 새 이미지가 표시되는 '티어링' 이 발생한다.

이를 막기 위해 DXGI는 '스와핑'이라는 기능을 구현했다.
새 이미지를 직접 렌더링 하는 대신, 이미지를 백 버퍼라고 하는 픽셀의 보조 버퍼에 그린다.
프런트 버퍼는 현재 모니터에 표시되고 있는 버퍼고. 모든 이미지를 백 버퍼에 그리는 것이 완료 되면 DXGI는 백버퍼의 내용으로 프런트 버퍼를 업데이트하고 이전 이미지는 버린다.

이렇게 해도 여전히 화면 찢어짐은 발생할 수 있다. 모니터가 새로 고쳐지는 동안에 이미지가 전송될 수 있기 때문에. 이때문에 (그리고 속도를 위해서) DXGI는 각 버퍼에 대한 포인터를 사용하고, 단순히 값을 전환한다. 그러면 후면버퍼는 전면 버퍼가 되고, 찢어짐이 발생하지 않는다.
"주소가 즉시 교환된다." 이게 핵심 키워드

추가적인 버퍼를 더 사용함으로써 성능을 높일 수 있다.
새로운 프레임을 렌더링 할때마다 버퍼의 체인 위치가 바뀌므로 스왑 체인이라고 한다.

렌더링 파이프라인
그래픽 프로그래밍에서 많이 듣게 될 것..... (실제로 질리게 듣고 있기도 하고)
렌더링 파이프라인에서 모든 일이 일어나고 있기 때문에.

렌더링 파이프 라인은 화면에 렌더링될 3D 이미지를 생성하는 프로세스이다.
GPU에서 한단계씩 차례대로 실행되게 구성되고 동작한다.

Input-Assembler Stage
파이프 라인의 첫번째 단계. 렌더링 하려는 3D모델에 대한 정보를 비디오 메모리에 수집한다. 그런다음 컴파일을 통해 렌더링을 준비한다.

Rasterizer Stage
백 버퍼 이미지가 어디에 그려질지, 더 구체적으로는 어떤 픽셀을 그릴지, 그 픽셀의 색상을 결정할 책임을 맡는다.

Output-Merger Stage
파이프라인의 마지막 단계로, 이 단계의 역할은 개별 모델 이미지를 전체 이미지로 결합하고 이미지를 백버퍼에 올바르게 배치한다.

Coordinate Systems (좌표계)
데카르트 좌표계
2D 좌표계라고 부르는 그것. 평평한 표면에서 정확한 지점을 찾는 시스템
점은 축을 따라 정확한 위치로 정의된다. 0을 원점으로, 일정한 거리마다 1씩 늘어나는 그거..

3D 좌표계
3D 좌표계는 단지 데카르트 좌표계의 확장일 뿐이다. 데카르트에서 X와 Y에 모두 수직으로 이어지는 세번째 축을 추가하면 그게 3D좌표다. 그냥 축이 3개라는것.

3D 기하학 (3D Geometry)
3D 좌표계의 한 점이 공간의 위치를 나타낸다면, 정확한 위치의 배열을 만들 수 있고, 이것이 3D모델이 된다.
문제는 그렇게 하면 메모리에서 많은 공간을 차지하므로 더 쉽고 빠른 방법이 채택되었다. 이 방법은 삼각형을 사용하여 정의된다. 삼각형을 사용하는 이유는 상상 할 수 있는 거의 모든 모양을 형성 할 수 있기 때문에.

Direct3D는 특히 삼각형을 중심으로 설계되었고 삼각형을 결합해서 모양을 만든다. 이 삼각형을 만들기 위해서는 정점이 필요하다. Vertices는 vetex의 복수형이고, vertex는 3차원 공간에서 정확한 점(정점)으로 정의 된다. x,y,z의 세 값으로 정의되고, DIrect3D에서는 약간 더 추가해 이 점의 다양한 속성도 포함한다. 즉, "3D 공간에서 정확한 점의 위치와 속성을 의미한다.

삼각형은 세개의 정점으로 구성되고, 각 정점은 시계방향 순서로 프로그램에서 정의 된다.
코딩하면 이 세개의 정점은 평평한 표면을 형성하며, 필요에 따라 회전, 텍스처링, 위치 지정 및 수정이 가능하다.
실제 3D 객체를 만들려면 삼각형을 결합해야 한다. 예를 들어 큐브는 삼각형 두개로 한면을 만들 수 있고, 각 변을 같은 방식으로 결합하여 구성할 수 있다.

하지만 실제로 모든 삼각형의 3D 좌표를 여러번 정의 하는 것은 매우 복잡하고 번거로운 작업으로, 모든 삼각형의 모든 모서리를 정의 하는 대신, 각 정점의 좌표와 정보, 그리고 그 순서가 포함된 정점 목록을 만들기만 하면 된다.

Primitives (기초형)
primitive는 3D 환경에서 삼각형, 선, 점 또는 무엇이든 단일 요소이다.
다음은 primitive를 이용하여 3D 객체를 만드는 방법이다.

1. 포인트 리스트
Point List는 화면에 개별 점으로 표시되는 정점 목록이다. 이는 3D 별자리를 렌더링 하고, 점선을 만들고, 미니맵에 위치를 표시하는 등의 작업에 유용할 수 있다.

2. 라인리스트
라인 리스트는 각 홀 수 정점과 다음 정점 사이에 별도의 선분을 만드는 정점 목록.
3D 그리드, 폭우, 웨이 포인트 선등 다양한 효과에 사용 할 수 있다.
라인 리스트가 화면에 표시되는 방식을 보여준다.

3. 라인 스트립
라인 리스트와 비슷하지만, 리스트의 모든 정점이 라인 세그먼트로 연결된다. 와이어 프레임 지형, 풀잎 및 기타 비모델 기반 객체와, 와이어 프레임 이미지를 만드는데 사용 할 수 있다. (특히 디버깅 프로그램에서 많이 사용됨)

4. 삼각형 리스트
세개의 정점으로 구성된 모든 그룹이 하나의 별도 삼각형을 만드는데 사용되는 정점 목록이다.

5. 삼각형 스트립
서로 연결된 일련의 삼각형을 만드는 정점 목록. 이것은 3D 그래픽을 다룰 때 가장 많이 사용되는 방법이다. 이것은 주로 게임의 3D 모델을 만드는데 사용된다.

기본 도형을 그릴때, 기본 도형의 한면만 보여주는 데는 약간의 문제가 있다. 두 면을 모두 보여줄 수 있지만, 일반적으로 모델은 완전히 둘러 쌓여 있어 내부를 볼 수 없다. 모델이 완전히 둘러싸여 있으면 각 삼각형의 한면만 그려야 한다. 결국 기본 도형의 두 면을 그리는데는 두배의 시간이 걸린다. 
이에 대한 해결법의 예시는 정점이 시계방향으로 주어질 때만 그린다. 뒤집으면 반시계 방향으로 되어 표시되지 않는다.
양면을 보여주는 방법으로는 그냥 두번 보여주는 방법이 있다.
