프레임 렌더링

Direct3D 초기화가 끝나면 실제 렌더링을 시작할 차례이다. 렌더링 자체는 매우 쉽지만 약간의 준비 작업이 필요하다. 이 수
업에서는 빈 프레임을 계속해서 렌더링 하기 위한 모든 것을 설정한다.

관련된 설정은 간단하다.해야 할 일이 두 가지 있다.첫째, GPU에 최종 이미지를 만들 메모리의 어느 부분을 알려야 한다.(이
경우 백버퍼를 말한다.) 들째, GPU에 백 버퍼의 어느 부분에 그려야 하는지 알려야 한다.

그 작업이 끝나면 렌더링을 시작 할 수 있다.

렌더 타겟 설정

렌더링 할 위치부터 시작해본다. 당연히 백버퍼이지만, 이 시점에서 Direct3D은 이 지섬에서 실제로 그것을 알지 못한다. 백
버퍼에 바로 렌더링 하고 싶지 않을 수도 있다. 예를 들어 많은 게임이 모델 표면에 렌더링 한 다음 해당 모델을 백 버처에 렌
더링 할 수도 있다.이 기술은 다양한 효과를 낼 수 있다. Portal이 대표적인 예시인데, 먼더 포털에 렌더링 한 다음 포탈 이
미지가 전체장면을 렌더링 한다.

Direct3D에서는 렌더링 할 때 렌더타겟을 설정해야 한다. 이것은 비디오 메모리에서 렌더링 할 위치를 유지하는 간단한 COM 객
체이다. 대부분의 경우 이것은 백 버퍼 이다.

우리가 이를 수행하는 방법은 다음과 같다.

ID3D11RenderTargetView* backbuffer; // 전역 선언

// 이 함수는 Direct3D를 초기화하고 사용할 수 있도록 준비합니다 
void InitD3D(HWND hWnd)
{
	// Direct3D 초기화 
	// ... 

	// 백 버퍼의 주소를 가져옵니다 
	ID3D11Texture2D* pBackBuffer;
	swapchain->GetBuffer(0, __uuidof(ID3D11Texture2D), (LPVOID*)&pBackBuffer);

	// 백 버퍼 주소를 사용하여 렌더 타겟을 생성합니다 
	dev->CreateRenderTargetView(pBackBuffer, NULL, &backbuffer);
	pBackBuffer->Release();

	// 렌더 타겟을 백 버퍼로 설정합니다 
	devcon->OMSetRenderTargets(1, &backbuffer, NULL);
}

여기서는 세가지가 수행된다.
첫째, 백 버퍼의 주소를 결정한다.
둘째, 해당 주소를 사용하여 렌더 타겟을 나타내는 COM 객체를 만든다.
셋째, 해당 객체를 활성 렌더 타겟으로 설정한다.

여기에 추가된 새로운 코드들이 무슨 뜻인지 알아보자.