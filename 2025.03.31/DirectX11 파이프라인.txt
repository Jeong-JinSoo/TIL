기존에 참고하던 사이트에서, 다음 차수에 파이프라인을 하기로 했었는데 그 차수부터 유료라서... 조금 그렇지만 일단 다른 곳에서 찾아보았다.

렌더링 파이프라인이란?
GPU를 사용해 리소스를 2D 이미지로 렌더링 하는 과정이다.
파이프라인은 여러 개의 파이프라인 단계로 구성되어 있으며 프로그램 가능 단계와 프로그램 단계로 구분된다.

고정 프로그램 단계 란?
Direct3D에서 모든 처리가 진행되며 응용 프로그램에서 변경 할 수 없는 단계
- 입력조립(IA)단계, 테셀레이터(TS)단계, 스트림 출력(SO)단계, 레스터라이저(RS)단계, 출력병합(OM)단계

프로그램 가능 단계?
응용 프로그램에서 쉐이더 프로그램을 통해 제공해야 하는 단계
- 정점 쉐이더(VS) 단계, 헐 쉐이더(HS) 단계, 도메인 쉐이더(DS) 단계, 기하 쉐이터(GS)단계, 픽셀 쉐이더(PS)단계

https://novemberfirst.tistory.com/27?pidx=0
렌더링 파이프라인을 구성하는 단계들과 관련 GPU 메모리 자원들

위의 파이프라인에서 오른쪽은 자원 메모리 풀을 뜻한다. 자원 메모리 풀에서 파이프라인의 단계로 가는 화살표는 그 단계가 자원을 입력으로 사용할 수 있음을 뜻하고 파이프라인의 단계에서 자원으로 가는 화살표는 그 단계가 GPU자원에 자료를 기록할 수 있음을 뜻한다.

* 입력 조립기 (Input Assembler) 단계
고정 함수 단계이다. 응용 프로그램에서 제공받은 정점 버퍼의 정점 데이터(프리미티브 데이터 : 점, 선, 삼각형)를 파이프라인 단계에서 사용할 프리미티브(선 리스트, 삼각형 리스트, 삼각형 스트립, 인접성을 가지는 프리미티브 등)로 조립한다.

즉, 메모리에서 기하 자료(정점 데이터와 index)를 읽어 기하학적 기본도형(삼각형, 선분 등)을 조립한다.

* 정점 셰이더(Vertext Shader) 단계
이 단계에서는 조립단계에서 출력되는 Primitive의 각 정점에 대한 연산을 수행한다.
이 정점 쉐이더는 항상 모든 정점들에 대해 한 번씩 실행된다. 또한 하나의 정점에 대해 한번만 호출되며 하나의 출력 정점을 생성될 뿐 아니라 파이프라인 단계에서 항상 수행이 되어야 하는 단계이다. 따라서 정점에 대한 변환이 필요하지 않아도 정점셰이더를 생성해 연결해야 한다.

이 정점 셰이더 함수의 구체적인 내용은 프로그래머가 구현해서 GPU에 전달하게 된다. 그 함수는 각 정점에 대해 GPU에서 실행되기 때문에 속도가 빠른다.

변환(Transformation), 스키닝(Skinning), 조명(Vertex Lighting)등 수많은 특수 효과를 정점 셰이더에서 수행 할 수 있다. 정점 쉐이더에서 입력 정점 자료는 텍스처라든가 변환 행렬, 장면 광원 정보등 GPU 메모리에 담긴 다른 자료에도 접근 할 수 있다.

* 테셀레이션 단계
테셀레이션이란 한 메시의 삼각형들을 더 잘게 쪼개서 새로운 삼각형들을 만드는 과정을 말한다.

테셀레이션의 장점은
1. LOD 구현이 가능하다.
카메라에 가까운 삼각형들은 테셀레이션을 적용해 더욱 세밀한 구현을 적용하고 멀리 있는 삼각형들은 테셀레이션을 적용하지 않는 방식의 세부 수준 메커니즘을 구현해 눈에 띄는 부분에 대해서만 더 투영 할 수 있게 된다.
2.Low-poly매시, 적은 수의 삼각형들로 이루어진 메시를 담아두고 즉석에서 삼각형들을 추가해 메모리를 절약할 수 있다.
3. 애니메이션, 물리 처리 같은 연산들을 단순한 Low-Poly 메시에 대해 수행하고, 테셀레이션 된 High-Poly메시는 렌더링에만 사용해 계산량을 줄일 수 있다.

* 기하 셰이더(Geometry Shader) 단계
이 단계는 정점 셰이더의 처리를 거친 정점 데이터를 입력받는다. 그리고 입력받은 정점에 정보를 추가하거나 삭제해 입력 기본도형을 다른 여러 기본 도형들로 확장 할 수도, 특정 조건에 따라서는 입력된 기본 도형을 출력하지 않고 버릴 수 도 있다.
기하 셰이더의 흔한 용도는 하나의 점이나 선분을 하나의 사각형으로 확장하는 것이다.

* 레스터라이저 단계
이 단계는 투영된 3차원 삼각형으로부터 픽셀 색상들을 계산해 내는 것이다. Resterization을 하는 동안 각 프리미티브를 구성하는 정점은 픽셀로 변환되고 프리미티브의 내부에 해당하는 점들은 보간을 통해 픽셀로 변환된다.

과정
1. 원근 투영 나누기(z 나누기)
2. 카메라 절두체를 벗어나는 점(Pixel)들을 클리핑(Clipping)
3. Primitive를 2차원 ViewPort로 매핑
4. Primitive의 모든 픽셀들에 대해 픽셀 셰이더를 호출

* 픽셀 셰이더(Pixel Shader)단계
각 픽셀 데티어(기본적으로 색상)를 생성한다. 프로그래머가 작성해서 GPU에서 실행하는 프로그램으로 각각의 픽셀 단편(pixel fragment)마다 실행된다.
상수 변수, 텍스처 데이터, 또는 픽셀 출력 데티어 등을 결합해 출력 색상을 결정한다.
이 단계에서 픽셀 조명 계산 또는 픽셀에 대한 후처리를 할 수 있다.

하나의 프리미티브를 구성하는 각 픽셀에 대해 픽셀 셰이더를 한번씩 호출한다.
다중 샘플링을 사용한다면 깊이/스텐실 테스트는 각 서브픽셀에 대해 한 번씩만 수행되며 다중 샘플링을 사용해도 이 픽셀셰이더는 하나의 픽셀에 대해 한번만 호출된다.

*출력 병합기(Output Merge) 단계
픽셀 셰이더가 생성한 픽셀 단편들은 이 단계로 입력된다. 최종적으로 픽셀의 색상을 생성해 렌더 타깃으로 출력하는 단계이다. 이 단계에서 일부 픽셀 단편들의 깊이 판정이나 스텐실 판정에 의해 버려지게 되며 버려지지 않은 픽셀 단편은 후면 버퍼에 기록된다.
흔히 말하는 블렌딩도 이 단계에서 일어난다.
	
	- 깊이-스텐실 검사 (Depth-Stencil Testing)
	픽셀이 그려져야 하는지를 결정하기 위해 깊이 값과 스텐실 값 데이터를 사용한다.
	하나의 깊이/스텐실 버퍼만 활성화 되며 깊이-스텐실 버퍼에 스텐실 요소가 없으면 스텐실 검	사는 항상 성공한다.
	또한 깊이 스텐실 버퍼가 파이프라인에 연결되지 않으면 스텐실 검사는 항상 성공한다.

	깊이검사.
	z = min(Viewport.MaxDepth), max(Viewport.MinDepth), z
	출력 픽셀의 깊이 값을 깊이 버퍼의 같은 위치의 깊이 값고 비교한다.
	비교 결과에 따라 출력 픽셀을 렌더 타깃에 출력하더나 출력하지 않는다.
