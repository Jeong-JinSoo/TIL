어제 했던 내용이 부실하다고 느껴 추가 작성

DirectX 3D Graphics에서의 렌더링 파이프라인은 그래픽스 카드에서 3D 모델을 렌더링 하는 과정을 각각의 단계별로 나타낸 것이다.

렌더링 파이프라인은 크게 두가지 버전으로 나뉘게 된다.

1. 고정 함수 파이프라인
2. 프로그래머블 파이프라인 (DirectX 10 이후부터 지원 현재 배우는 기준은 DirectX11)

두가지 버전중에서 프로그래머블 파이프라인이 더 우연하며 강력한 기능을 제공한다.
때문에 프로그래머블 파이프라인을 기준으로 각 단계에 대하여 정리하도록 한다.

렌더링 파이프라인의 단계(*생략가능, #필수)

1. 입력 어셈블러(IA - Input Assembler)#
정점(버텍스)데이터를 가져와 점, 선, 삼각형 등의 프리미티브르 조합 생성한다.
버텍스 버퍼, 인덱스 버퍼 등의 데이터를 이용하여 버텍스의 정보를 준비하는 단계이다.

(ex_IAcode.cpp 참고)

D3D11_USAGE 종류
D3D11_USAGE_DEFAULT
- GPU의 읽기/쓰기 허용, CPU는 접근 할 수 없음. 대부분 이 값을 사용.

D3D11_USAGE_IMMUTABLE
- GPU의 읽기 허용, CPU는 접근 할 수 없음. 생성할 때 초기화를 해야 한다.

D3D11_USAGE_STANGING
- GPU 메모리에서 CPU메모리로 복사를 허용(CopyResource 함수), 엄청느림

그리고 이거, 저번에 DirectX 11초기화 할 때 잠깐 지나가듯이 했던거 같은데... 너무 익숙한걸.

2. 버텍스 쉐이더(VS - Vertex Shader)#
각 버텍스에 대해 연산을 수행한다.
공간 변환, 조명계산, 스키닝 등의 작업을 처리하여 버텍스의 최종 위치 및 특성을 계산 하는 단계이다.

(ex_VScode.cpp 참고)

https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2F2q7CK%2FbtsqR9JZ8Ie%2Fk37Dj5K0kD1XSkwxAk8L6k%2Fimg.png
공간 변환 내용 정리(이미지)

M(Model)
로컬 공간 > 월드 공간으로 변환
각 오브젝트마다 자신의 중심(Pivot)위치를 Vector(0,0,0)으로 하는 좌표 공간(1.LOCAL SPACE)을 가지고 있다.
3D 공간내의 월드공간(2.WORLD SPACE)은 단하나의 위치를 원점으로 하는 좌표 공간을 가지고 있다.
모델변환은 각 오브젝트의 좌표 공간을 변환시켜 월드 공간에 통합 시키는 과정이다.
이 과정에서 이동(T),회전(R), 크기(S)의 변환이 이루어 진다.
이동, 회전, 크기의 세가지 변환은 각각의 행렬들을 통하여 수행되고, 이를 하나의 행렬로 만드는 것을 TRS행렬 이라고 한다.
TRS행렬이 곱해지는 순서는 S*R*T순서로 곱해지게 된다.
(벡터와 곱할때 벡터는 가장 우측 즉, 제일 나중에)
따라서 만일 각각 따로 곱해야 할때에는 행렬을 좌측에 두고 T*R*S의 역순으로 곱해준다.

V(View)
월드공간 > 카메라 공간으로 변환
카메라또한 카메라의 위치가 원점 Vector3(0,0,0)으로 하는 좌표를 가지고 있다.
카메라가 바라보는 방향이 +Z 축인 공간이다. (깊이)
뷰 변환은 모든 오브젝트를 화면에 그려내기 쉽도록 카메라 기준으로 공간을 변환하는 과정이다.

P(Projection)
카메가 공간 > 클립 공간으로 변환
카메라를 기준으로 정점 위치를 화면에 보이기 위한 정점의 위치로 변환해준다.
화면에 렌더링 될 수 있는 영역을 나타배는 절두체(Frustum)가 정의 된다.

https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FptlfD%2FbtsqSbHQElV%2FnbExS9UyySOpgbB1gDTazk%2Fimg.png
(절두체 참고 이미지)

절두체는 Near Clipping Plane, Far Clipping Plane, Field of View를 통해 정의한다.
절두체를 완전히 벗어나는 폴리곤들은 모두 버려지며 경계에 걸쳐있는 폴리곤들은 유지한다.
원근감과 관련된 직교, 원근 투영이 행해진다.
클립 공간의 좌표계는 사실 3D가 아닌 4D이다.

w값은 카메라에서 멀어질수록 커지며, 추후 NDC(Normalized Device Coordinates)로의 변환에서 사용된다.
	*NDC 변환은 3D 그래픽스 파이프라인에서 처리되는 중요한 단계 중 하나이다. 월드 좌표나 	카메라 좌표로부터 화면 좌표로 변환된 객체를 최종적으로 디스플레이되는 화면에 표시하기 	위해 필요한 과정이다. 투영변환을 거쳐 3D 공간의 좌표를 정규화된 디바이스 좌표로 변환하	는 과정이다.

클립공간의 4D 좌표계를 동차 좌표계(Homogeneous Coordinates)라고 한다.
버텍스 셰이더의 최종 출력은 클립 공간의 정점 데이터이다.

3. 헐 셰이더(HS - Hull Shader) & 도메인 셰이더(DS - Domain Shader) & 테셀레이션(Tessellation)*
테셀레이션을 사용하여 복잡하고 기하학 적인 표현을 생성하거나 세부 레벨을 조절한다.
이 단계는 필수가 아닌 선택적인 단계이며, 고급 그래픽스 기술에서 사용되기도 한다.

4. 기하 셰이더(GS - GeoMetry Shader)*
기하 프리미티브들을 이용하여 새로운 프리미티브를 생성하거나 변형시킨다.
3번 단계와 마찬가지로 선택적인 단계이며 특정 효과를 위하여 필요한 단계이다.

5. 레스터 라이저#

정점 정보를 완전히 결정한 다음 3D 도형을 실제 픽셀 데이터로 변환해 주는 단계이다.
이때 가지고 있는 정점 데이터는 말 그대로 정점의 데이터이며 정점사이의 공간들은 보간(interpolation)을 하여 채워주어야 한다.
래스터 라이저는 다양한 작업을  한다.

1. 클리핑
버텍스 셰이더의 마지막 단계에서 절두체를 완전히 벗어나는 폴리곤은 버렸다.
하지만 절두체의 경계에 있는 폴리곤들은 버려지지 않았는데 이때 레스터 라이저에서 이렇게 걸쳐져 있는 폴리곤들을 잘라내어 절두체와 내부 외부 영역을 분리하여 절두체 외부 영역은 버리는 추가 작업을 한다.

2. 원근 분할
클립 스페이스(동차 좌표계, 4D)좌표의 모든 요소를 W값으로 나누게 되는데 이를 통해 모든 원근법 구현이 완료되며 이를 원근 분할 이라고 하며 원근 분할을 끝마친 좌표계를 NDC라고 한다.

NDC(Normalized Device Coordinated)
클립 스페이스의 좌표(X,Y,Z)를 모두 W로 나눈 좌표이다.
X, Y 좌표는 모두 -1 ~ 1, Z좌표는 0 ~ 1에 위치하는 좌표계이다.
스크린 좌표로 손쉽게 변환할 수 있도록 하기 위한 3D 공간 변환 상의 마지막 좌표계이다.