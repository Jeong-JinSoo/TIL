//클래스 상호 참조 해결 방법

//AAA.h 클래스 헤더 파일 ----------------------
#include "BBB.h"
class AAA
{
	BBB* p_bbb;
};

//BBB.h 클래스 헤더 파일 ----------------------
#include "AAA.h"
class BBB
{
	AAA* p_aaa;
};

//BBB 클래스 해더 파일에 AAA 클래스 해더를 포함시키게 되면 상호 참조로 컴파일을 할 때 오류가 발생합니다.
// 
//헤더 파일에서			#include "AAA.h"를 class AAA; 로 변경   //전방선언 predeclaration
//소스 파일(BBB.cpp)에	#include "AAA.h" 추가해서 사용.


int main(void)
{
	return 0;
}


// 상호 참조나 순환 참조로 의존관계를 만들지 않도록 하라. ***

//A.H ----------------------------------
#include "B.H"
class A
{
	B* m_pb;
	A(B* pb);
};
//B.H ----------------------------------
class A; // 이렇게 선언만 합니다.
class B
{
	A* m_pa;
	B(A* pa);
};
 
//A.CPP ----------------------------------
#include "A.H"
A::A(B* pb)
{
	m_pb = pb;
}

//B.CPP ----------------------------------
#include "B.H"
#include "A.H"  // 여기서 참조하는 것은 상호 참조가 아닙니다.
B::B(A* pa)
{
	m_pa = pa;
}

//전방 선언은 무거운 해더와 재컴파일을 방지 할 수 있다.
//단 전방선언은 선언이고 정의부가 없으므로, 포인터나 레퍼런스 선언만 가능하고, 
//인스턴스를 만드는 것은 허용되지 않는다.
// 
//따라서, 구현할때 서로 상호 의존관계가 생기지 않도록 하는 것이 좋다. ***
//별도의 클래스를 구성한다던가, 인터페이스 활용등으로 의존관계가 안 생기도록 설계하자.

